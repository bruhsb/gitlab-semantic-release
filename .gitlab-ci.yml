variables:
  # By default, run a "normal" pipeline
  # If the user sets PIPELINE_MODE to "full" or "FULL", then run all pipeline jobs
  PIPELINE_MODE: "normal"

workflow:
  rules:
    # If PIPELINE_MODE is full or FULL, trigger the pipeline unconditionally
    - if: '$PIPELINE_MODE == "full" || $PIPELINE_MODE == "FULL"'
      when: always

    # 1) Skip pipeline if commit is a tag or has a semantic-release commit message
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_MESSAGE =~ /^chore\\(release\\)/'
      when: never

    # 2) Run pipeline if triggered by a merge request event
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

    # 3) Skip pipeline for branch pushes if there's an open MR referencing this commit
    - if: '$CI_OPEN_MERGE_REQUESTS'
      when: never

    # 4) Skip pipeline if it's just a push of a blank new branch
    - if: '$CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
      when: never

    # 5) If the Dockerfile changes, run pipeline
    - changes:
      - Dockerfile
      when: always

    # 6) Otherwise, do not run pipeline
    - when: never
# Stages declaration
stages:
  - build
  - security_scan
  - release
  - tag_image

# ------------------------------------------------------------------------------
# BUILD AND PUSH DOCKER IMAGE
# Only run if Dockerfile has changed, skip if commit is a tag
# ------------------------------------------------------------------------------
build_image:
  stage: build
  image: docker:27.5.1
  services:
    - docker:27.5.1-dind
  script:
    - echo "$CI_REGISTRY_TOKEN" | docker login registry.gitlab.com -u CI_REGISTRY_TOKEN --password-stdin
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  rules:
    # If full pipeline, always run
    - if: '$PIPELINE_MODE == "full" || $PIPELINE_MODE == "FULL"'
      when: always
    # Otherwise follow original rules
    - if: '$CI_COMMIT_TAG'
      when: never
    - changes:
      - Dockerfile
      when: always
    - when: never

# ------------------------------------------------------------------------------
# SECURE IMAGE SCANNERS
# (Runs only if build_image finished successfully, enforced by stage order)
# ------------------------------------------------------------------------------
trivy_scan:
  stage: security_scan
  image:
    name: aquasec/trivy:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - trivy image "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  allow_failure: true
  rules:
    # If full pipeline, always run
    - if: '$PIPELINE_MODE == "full" || $PIPELINE_MODE == "FULL"'
      when: always
    # Otherwise default to on_success
    - when: on_success

trivy_misconfig:
  stage: security_scan
  image:
    name: aquasec/trivy:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - trivy image --image-config-scanners misconfig "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  allow_failure: true
  rules:
    - if: '$PIPELINE_MODE == "full" || $PIPELINE_MODE == "FULL"'
      when: always
    - when: on_success

# ------------------------------------------------------------------------------
# RUN SEMANTIC-RELEASE
# (Runs only on main/master, after security_scan)
# By default, if any job in security_scan fails, it won't proceed.
# ------------------------------------------------------------------------------
semantic_release:
  stage: release
  image: "$CI_REGISTRY_IMAGE:latest"
  before_script:
    - cd "$CI_PROJECT_DIR"
    - git config user.email "ci@localhost"
    - git config user.name "GitLab CI"
  variables:
    GITLAB_TOKEN: $GITLAB_TOKEN
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  script:
    - semantic-release
    - npx semantic-release --dry-run | tee release_output.txt
    - |
      echo "RELEASE_VERSION=$(grep 'The next release version is' -m 1 release_output.txt | awk '{print $NF}')" > release_version.txt
  artifacts:
    paths:
      - release_version.txt
  rules:
    - if: '$PIPELINE_MODE == "full" || $PIPELINE_MODE == "FULL"'
      when: always
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      when: on_success

# ------------------------------------------------------------------------------
# TAG AND PUSH THE IMAGE
# (Runs only on main/master, after semantic_release)
# ------------------------------------------------------------------------------

# Hidden YAML anchor that defines our check_and_tag function
.check_and_tag_function: &check_and_tag_function |
  check_and_tag() {

    # Auth in Docker Registry
    docker login -u "$CI_REGISTRY" -p "$CI_REGISTRY_TOKEN" "$CI_REGISTRY"

    # 1) Validate if the newly built image exists
    if ! docker manifest inspect "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" > /dev/null 2>&1; then
      echo "WARN: There's no new image built. ... That's All Folks o/"
      exit 0
    fi

    # 2) If RELEASE_VERSION is empty, get the most recent tag from the repo
    if [ -z "$RELEASE_VERSION" ]; then
      TAG_VERSION="$(git describe --tags --abbrev=0 2>/dev/null || echo 'latest')"
    else
      TAG_VERSION="$RELEASE_VERSION"
    fi

    # 3) Validate if $CI_REGISTRY_IMAGE:$TAG_VERSION already exists
    if docker manifest inspect "$CI_REGISTRY_IMAGE:$TAG_VERSION" > /dev/null 2>&1; then
      echo "WARN: Tag Version $TAG_VERSION already in use: $CI_REGISTRY_IMAGE:$TAG_VERSION ... That's All Folks o/"
      exit 0
    fi

    # 4) Everything is valid â†’ tag the newly built image and push
    docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:$TAG_VERSION"
    docker push "$CI_REGISTRY_IMAGE:$TAG_VERSION"
    echo "DONE! New Image Tagged: $CI_REGISTRY_IMAGE:$TAG_VERSION"
    exit 0
  }

tag_image:
  stage: tag_image
  image: docker:27.5.1-alpine3.21
  services:
    - docker:27.5.1-dind-alpine3.21
  needs:
    - job: semantic_release
      artifacts: true
  script:
    - |
      # Source the release_version.txt if available (from semantic_release)
      if [ -f release_version.txt ]; then
        source release_version.txt
      fi
    - *check_and_tag_function
    - check_and_tag || exit 1
  rules:
    - if: '$PIPELINE_MODE == "full" || $PIPELINE_MODE == "FULL"'
      when: always
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      when: on_success
